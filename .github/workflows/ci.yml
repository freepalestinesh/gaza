name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [api, ui, mcp-server]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.component }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ./${{ matrix.component }}
        run: npm ci
      
      - name: Run linter
        working-directory: ./${{ matrix.component }}
        run: npm run lint --if-present

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [api, ui, mcp-server]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.component }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ./${{ matrix.component }}
        run: npm ci
      
      - name: Run tests
        working-directory: ./${{ matrix.component }}
        run: npm test --if-present
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          JWT_SECRET: test-secret

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        component: [api, ui, mcp-server]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.component }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ./${{ matrix.component }}
        run: npm ci
      
      - name: Build application
        working-directory: ./${{ matrix.component }}
        run: npm run build --if-present
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001
          NEXT_PUBLIC_APP_URL: http://localhost:3000

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build API Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: false
          tags: gaza-api:latest
      
      - name: Build UI Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./ui
          push: false
          tags: gaza-ui:latest
      
      - name: Build MCP Server Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./mcp-server
          push: false
          tags: gaza-mcp-server:latest
